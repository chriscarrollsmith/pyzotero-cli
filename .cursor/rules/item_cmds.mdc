---
description: `pyzotero` documentation for working with items
globs: pyzotero_cli/item_cmds.py
alwaysApply: false
---

This document contains the portion of the `pyzotero` documentation that corresponds to the item-related functionality in our CLI wrapper.

# Item Commands

## Retrieving Items

```python
# Return Zotero library items
zot.items([search/request parameters])
```

Returns a list of dicts containing Zotero library items.

```python
# Return count of all items in a library/group
zot.count_items()
```

Returns an integer count of all items.

```python
# Return top-level library items
zot.top([search/request parameters])
```

Returns a list of dicts containing top-level Zotero library items.

```python
# Return publications from "My Publications"
zot.publications([search/request parameters])
```

Returns the publications from the "My Publications" collection of a user's library. Only available on user libraries.

```python
# Return trashed items
zot.trash([search/request parameters])
```

Returns library items from the library's trash.

```python
# Return deleted items
zot.deleted([search/request parameters])
```

Returns deleted collections, library items, tags, searches and settings (requires "since=" parameter).

```python
# Return a specific item
zot.item(itemID[, search/request parameters])
```

Parameters:
- `itemID`: a zotero item ID

Returns a list containing a dict for the specified item.

```python
# Return child items of a specific item
zot.children(itemID[, search/request parameters])
```

Parameters:
- `itemID`: a zotero item ID

Returns the child items of a specific item.

```python
# Return items from a specific collection
zot.collection_items(collectionID[, search/request parameters])
```

Parameters:
- `collectionID`: a Zotero collection ID

Returns items from the specified collection. This does not include items in sub-collections.

```python
# Return top-level items from a collection
zot.collection_items_top(collectionID[, search/request parameters])
```

Parameters:
- `collectionID`: a Zotero collection ID

Returns top-level items from the specified collection.

```python
# Retrieve a set of non-adjacent items
zot.get_subset(itemIDs[, search/request parameters])
```

Parameters:
- `itemIDs`: a list of Zotero Item IDs

Retrieve an arbitrary set of non-adjacent items. Limited to 50 items per call.

## Item Methods

```python
# Get available item types
zot.item_types()
```

Returns a dict containing all available item types.

```python
# Get available item fields
zot.item_fields()
```

Returns a dict of all available item fields.

```python
# Get creator types for an item type
zot.item_creator_types(itemtype)
```

Parameters:
- `itemtype`: a valid Zotero item type (from `item_types()`)

Returns a dict of all valid creator types for the specified item type.

```python
# Get all creator fields
zot.creator_fields()
```

Returns a dict containing all localized creator fields.

```python
# Get fields for an item type
zot.item_type_fields(itemtype)
```

Parameters:
- `itemtype`: a valid Zotero item type (from `item_types()`)

Returns all valid fields for the specified item type.

```python
# Get item creation template
zot.item_template(itemtype, linkmode)
```

Parameters:
- `itemtype`: a valid Zotero item type (from `item_types()`)
- `linkmode`: either None (default) or a valid Zotero linkMode value required when itemtype is attachment

Returns an item creation template for the specified item type.

## Creating and Updating Items

```python
# Create Zotero library items
zot.create_items(items[, parentid, last_modified])
```

Parameters:
- `items`: one or more dicts containing item data
- `parentid`: A Parent item ID. This will cause the item(s) to become child items of the given parent ID
- `last_modified`: If not None will set the value of the If-Unmodified-Since-Version header

Returns a copy of the created item(s) if successful. Use of `item_template()` is recommended to first obtain a valid structure.

Example:
```python
template = zot.item_template('book')
template['creators'][0]['firstName'] = 'Monty'
template['creators'][0]['lastName'] = 'Cantsin'
template['title'] = 'Maris Kundzins: A Life'
resp = zot.create_items([template])
```

If successful, `resp` will be a dict containing the creation status of each item:
```python
{'failed': {}, 'success': {'0': 'ABC123'}, 'unchanged': {}}
```

```python
# Update an item in your library
zot.update_item(item [, last_modified])
```

Parameters:
- `item`: a dict containing item data. Fields not in item will be left unmodified.
- `last_modified`: If not None, will set the value of the If-Unmodified-Since-Version header.

Will return True if successful, or raise an error.

Example:
```python
i = zot.items()
i[0]['data']['title'] = 'The Sheltering Sky'
i[0]['data']['creators'][0]['firstName'] = 'Paul'
i[0]['data']['creators'][0]['lastName'] = 'Bowles'
zot.update_item(i[0])
```

```python
# Update multiple items in your library
zot.update_items(items)
```

Parameters:
- `items`: a list of dicts containing Item data. Fields not in item will be left unmodified.

Will return True if successful, or raise an error. The API accepts 50 items per call, so longer updates are chunked.

```python
# Check item validity
zot.check_items(items)
```

Parameters:
- `items`: one or more dicts containing item data

Check whether items to be created contain only valid keys. This method creates a set of valid keys by calling `item_fields()`, then compares the user-created dicts to it. If any keys are unknown, an `InvalidItemFields` exception is raised.

## Deleting Items

```python
# Delete items from your library
zot.delete_item(item[, last_modified])
```

Parameters:
- `item`: a list of one or more dicts containing item data. You must first retrieve the item(s) you wish to delete, as version data is required.
- `last_modified`: If not None, will set the value of the If-Unmodified-Since-Version header. 
